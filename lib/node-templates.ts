import { MarkerType } from "reactflow"

// 노드 템플릿 정의
export const nodeTemplates = [
  {
    type: "input",
    label: "텍스트 입력",
    description: "텍스트 데이터를 입력합니다",
    category: "입력",
    inputs: [],
    outputs: ["text"],
    defaultParameters: {
      inputType: "text",
      inputValue: "안녕하세요, 이것은 테스트 입력입니다.",
    },
  },
  {
    type: "input",
    label: "JSON 입력",
    description: "JSON 데이터를 입력합니다",
    category: "입력",
    inputs: [],
    outputs: ["data"],
    defaultParameters: {
      inputType: "json",
      inputValue: '{"name": "홍길동", "age": 30}',
    },
  },
  {
    type: "input",
    label: "API 요청",
    description: "API에서 데이터를 가져옵니다",
    category: "입력",
    inputs: [],
    outputs: ["response"],
    defaultParameters: {
      inputType: "api",
      url: "https://jsonplaceholder.typicode.com/todos/1",
      method: "GET",
    },
  },
  {
    type: "process",
    label: "데이터 필터",
    description: "조건에 맞는 데이터를 필터링합니다",
    category: "처리",
    inputs: ["data"],
    outputs: ["filtered"],
    defaultParameters: {
      processType: "filter",
      filterCondition: "item => item.completed === true",
    },
  },
  {
    type: "process",
    label: "데이터 변환",
    description: "데이터 형식을 변환합니다",
    category: "처리",
    inputs: ["input"],
    outputs: ["output"],
    defaultParameters: {
      processType: "transform",
      transformFunction: "data => ({ processed: data, timestamp: new Date().toISOString() })",
    },
  },
  {
    type: "llm",
    label: "Gemini 1.5 Flash",
    description: "Google Gemini 1.5 Flash 모델을 사용합니다",
    category: "LLM",
    inputs: ["prompt", "context"],
    outputs: ["response"],
    defaultParameters: {
      model: "gemini-1.5-flash",
      temperature: 0.7,
      maxTokens: 1024,
      topP: 0.95,
      topK: 40,
      prompt: "다음 질문에 답변해주세요:",
    },
  },
  {
    type: "llm",
    label: "Gemini 1.5 Pro",
    description: "Google Gemini 1.5 Pro 모델을 사용합니다",
    category: "LLM",
    inputs: ["prompt", "context"],
    outputs: ["response"],
    defaultParameters: {
      model: "gemini-1.5-pro",
      temperature: 0.7,
      maxTokens: 1024,
      topP: 0.95,
      topK: 40,
      prompt: "다음 질문에 답변해주세요:",
    },
  },
  {
    type: "llm",
    label: "Gemini Pro",
    description: "Google Gemini Pro 모델을 사용합니다",
    category: "LLM",
    inputs: ["prompt", "context"],
    outputs: ["response"],
    defaultParameters: {
      model: "gemini-pro",
      temperature: 0.7,
      maxTokens: 1024,
      topP: 0.95,
      topK: 40,
      prompt: "다음 질문에 답변해주세요:",
    },
  },
  {
    type: "tool",
    label: "웹 검색",
    description: "웹에서 정보를 검색합니다",
    category: "도구",
    inputs: ["query"],
    outputs: ["results"],
    defaultParameters: {
      toolType: "search",
      query: "인공지능이란?",
    },
  },
  {
    type: "tool",
    label: "코드 실행",
    description: "Python 코드를 실행합니다",
    category: "도구",
    inputs: ["code"],
    outputs: ["result", "error"],
    defaultParameters: {
      toolType: "code",
      code: "print('Hello, World!')",
    },
  },
  {
    type: "output",
    label: "텍스트 출력",
    description: "텍스트 형식으로 결과를 출력합니다",
    category: "출력",
    inputs: ["text"],
    outputs: [],
    defaultParameters: {},
  },
  {
    type: "output",
    label: "JSON 출력",
    description: "JSON 형식으로 결과를 출력합니다",
    category: "출력",
    inputs: ["data"],
    outputs: [],
    defaultParameters: {
      format: "json",
    },
  },
]

// 워크플로우 템플릿 정의
export const workflowTemplates = [
  {
    id: "template-1",
    name: "QA 챗봇",
    description: "문서 기반 질의응답 챗봇 워크플로우",
    nodes: [
      {
        id: "node-1",
        type: "input",
        position: { x: 100, y: 100 },
        data: {
          label: "사용자 질문",
          description: "사용자의 질문을 입력받습니다",
          type: "input",
          inputs: [],
          outputs: ["question"],
          parameters: {
            inputType: "text",
            inputValue: "인공지능이란 무엇인가요?",
          },
        },
      },
      {
        id: "node-2",
        type: "tool",
        position: { x: 100, y: 250 },
        data: {
          label: "문서 검색",
          description: "관련 문서를 검색합니다",
          type: "tool",
          inputs: ["query"],
          outputs: ["context"],
          parameters: {
            toolType: "search",
          },
        },
      },
      {
        id: "node-3",
        type: "llm",
        position: { x: 400, y: 175 },
        data: {
          label: "Gemini 1.5 Flash",
          description: "질문과 문서를 기반으로 답변을 생성합니다",
          type: "llm",
          inputs: ["prompt", "context"],
          outputs: ["response"],
          parameters: {
            model: "gemini-1.5-flash",
            temperature: 0.7,
          },
        },
      },
      {
        id: "node-4",
        type: "output",
        position: { x: 700, y: 175 },
        data: {
          label: "답변 출력",
          description: "사용자에게 답변을 제공합니다",
          type: "output",
          inputs: ["text"],
          outputs: [],
        },
      },
    ],
    edges: [
      {
        id: "edge-1",
        source: "node-1",
        sourceHandle: "question",
        target: "node-2",
        targetHandle: "query",
        animated: true,
        style: { stroke: "#6366f1" },
        markerEnd: {
          type: MarkerType.ArrowClosed,
          color: "#6366f1",
        },
      },
      {
        id: "edge-2",
        source: "node-1",
        sourceHandle: "question",
        target: "node-3",
        targetHandle: "prompt",
        animated: true,
        style: { stroke: "#6366f1" },
        markerEnd: {
          type: MarkerType.ArrowClosed,
          color: "#6366f1",
        },
      },
      {
        id: "edge-3",
        source: "node-2",
        sourceHandle: "context",
        target: "node-3",
        targetHandle: "context",
        animated: true,
        style: { stroke: "#6366f1" },
        markerEnd: {
          type: MarkerType.ArrowClosed,
          color: "#6366f1",
        },
      },
      {
        id: "edge-4",
        source: "node-3",
        sourceHandle: "response",
        target: "node-4",
        targetHandle: "text",
        animated: true,
        style: { stroke: "#6366f1" },
        markerEnd: {
          type: MarkerType.ArrowClosed,
          color: "#6366f1",
        },
      },
    ],
  },
  {
    id: "template-2",
    name: "텍스트 요약 에이전트",
    description: "긴 텍스트를 요약하는 AI 워크플로우",
    nodes: [
      {
        id: "node-1",
        type: "input",
        position: { x: 100, y: 100 },
        data: {
          label: "텍스트 입력",
          description: "요약할 텍스트를 입력받습니다",
          type: "input",
          inputs: [],
          outputs: ["text"],
          parameters: {
            inputType: "text",
            inputValue:
              "인공지능(AI)은 인간의 학습능력, 추론능력, 지각능력, 자연언어의 이해능력 등을 컴퓨터 프로그램으로 실현한 기술입니다. 인공지능은 머신러닝과 딥러닝을 통해 데이터로부터 학습하고 패턴을 인식하여 의사결정을 내릴 수 있습니다. 최근에는 자연어 처리, 컴퓨터 비전, 음성 인식 등 다양한 분야에서 혁신적인 발전을 이루고 있으며, 의료, 금융, 교육, 제조업 등 여러 산업에 적용되고 있습니다.",
          },
        },
      },
      {
        id: "node-2",
        type: "llm",
        position: { x: 400, y: 100 },
        data: {
          label: "Gemini 1.5 Flash",
          description: "텍스트를 요약합니다",
          type: "llm",
          inputs: ["prompt"],
          outputs: ["response"],
          parameters: {
            model: "gemini-1.5-flash",
            temperature: 0.3,
            prompt: "다음 텍스트를 간결하게 요약해주세요:",
          },
        },
      },
      {
        id: "node-3",
        type: "output",
        position: { x: 700, y: 100 },
        data: {
          label: "요약 출력",
          description: "요약된 텍스트를 출력합니다",
          type: "output",
          inputs: ["text"],
          outputs: [],
        },
      },
    ],
    edges: [
      {
        id: "edge-1",
        source: "node-1",
        sourceHandle: "text",
        target: "node-2",
        targetHandle: "prompt",
        animated: true,
        style: { stroke: "#6366f1" },
        markerEnd: {
          type: MarkerType.ArrowClosed,
          color: "#6366f1",
        },
      },
      {
        id: "edge-2",
        source: "node-2",
        sourceHandle: "response",
        target: "node-3",
        targetHandle: "text",
        animated: true,
        style: { stroke: "#6366f1" },
        markerEnd: {
          type: MarkerType.ArrowClosed,
          color: "#6366f1",
        },
      },
    ],
  },
]
